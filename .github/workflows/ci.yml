name: Tattoo Journey 2.0 - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.2'

jobs:
  # Web „Ç¢„Éó„É™„ÅÆ„ÉÜ„Çπ„Éà
  web-test:
    name: Web App Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: TypeScript check - Web
        run: npm run type-check:web

      - name: Lint web code
        run: npm run lint:web

      - name: Build web app
        run: npm run build:web

  # „É¢„Éê„Ç§„É´„Ç¢„Éó„É™„ÅÆ„ÉÜ„Çπ„Éà
  mobile-test:
    name: Mobile App Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mobile
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Run security tests
        run: npm run test:security

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: mobile-coverage
          path: ./mobile/coverage/

  # FirebaseÁµ±Âêà„ÉÜ„Çπ„Éà
  firebase-test:
    name: Firebase Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Start Firebase Emulators
        run: firebase emulators:start --detached

      - name: Run Firebase tests
        run: cd mobile && npm run test:firebase

      - name: Run E2E tests
        run: cd mobile && npm run test:e2e

      - name: Stop Firebase Emulators
        if: always()
        run: firebase emulators:stop

  # iOS Build & Deploy
  ios-build:
    name: iOS Build & Deploy
    runs-on: macos-14
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        working-directory: ./mobile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ./mobile

      - name: Install dependencies
        run: npm ci

      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      - name: Cache Xcode DerivedData
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('mobile/ios/Podfile.lock') }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Configure Firebase (Staging)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_INFO_PLIST_STAGING }}" | base64 -d > ios/GoogleService-Info.plist

      - name: Configure Firebase (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_INFO_PLIST }}" | base64 -d > ios/GoogleService-Info.plist

      - name: Import Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.IOS_CERTIFICATES_PASSWORD }}

      - name: Install Provisioning Profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/tattoo-journey.mobileprovision

      - name: Build and Deploy to TestFlight (Staging)
        if: github.ref == 'refs/heads/develop'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_IDENTIFIER: com.karamon.tattoojourney.staging
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: bundle exec fastlane ios beta

      - name: Build and Deploy to App Store (Production)
        if: github.ref == 'refs/heads/main'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_IDENTIFIER: com.karamon.tattoojourney
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: bundle exec fastlane ios release

  # Android Build & Deploy
  android-build:
    name: Android Build & Deploy
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        working-directory: ./mobile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ./mobile

      - name: Install dependencies
        run: npm ci

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Configure Firebase (Staging)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON_STAGING }}" | base64 -d > android/app/google-services.json

      - name: Configure Firebase (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 -d > android/app/google-services.json

      - name: Setup Android Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/release.keystore
          echo "MYAPP_RELEASE_STORE_FILE=release.keystore" >> android/gradle.properties
          echo "MYAPP_RELEASE_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/gradle.properties
          echo "MYAPP_RELEASE_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/gradle.properties
          echo "MYAPP_RELEASE_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/gradle.properties

      - name: Setup Google Play Service Account
        run: |
          echo "${{ secrets.GOOGLE_PLAY_JSON_KEY }}" | base64 -d > android/service-account-key.json

      - name: Build and Deploy to Google Play (Internal Testing - Staging)
        if: github.ref == 'refs/heads/develop'
        env:
          APP_IDENTIFIER: com.karamon.tattoojourney.staging
          GOOGLE_PLAY_JSON_KEY_FILE: ./android/service-account-key.json
        run: bundle exec fastlane android beta

      - name: Build and Deploy to Google Play (Production)
        if: github.ref == 'refs/heads/main'
        env:
          APP_IDENTIFIER: com.karamon.tattoojourney
          GOOGLE_PLAY_JSON_KEY_FILE: ./android/service-account-key.json
        run: bundle exec fastlane android release

  # Notification
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [ios-build, android-build]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Notify Slack on Success
        if: ${{ needs.ios-build.result == 'success' && needs.android-build.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#dev-mobile'
          text: |
            ‚úÖ *Deployment Successful!*
            
            üì± *Environment:* ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            üîó *Branch:* ${{ github.ref_name }}
            üë§ *Author:* ${{ github.actor }}
            
            Both iOS and Android builds deployed successfully! üéâ
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: ${{ needs.ios-build.result == 'failure' || needs.android-build.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-mobile'
          text: |
            ‚ùå *Deployment Failed!*
            
            üì± *Environment:* ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            üîó *Branch:* ${{ github.ref_name }}
            üë§ *Author:* ${{ github.actor }}
            
            iOS: ${{ needs.ios-build.result }}
            Android: ${{ needs.android-build.result }}
            
            Please check the logs and fix the issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}