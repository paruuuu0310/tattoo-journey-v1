# Tattoo Journey 2.0 開発ルール

## 🎯 プロジェクト概要
Tattoo Journey 2.0は、AI技術を活用したタトゥーアーティストとお客様のマッチングプラットフォームです。

## 🚀 技術スタック
- **フロントエンド**: Next.js 14 (App Router), React 19, TypeScript
- **モバイル**: React Native, TypeScript
- **スタイリング**: Tailwind CSS, Shadcn UI
- **バックエンド**: Firebase (Auth, Firestore, Storage)
- **AI**: Google Cloud Vision API
- **地図**: Google Maps API

## 📝 コーディング規約

### 基本原則
- 関数型プログラミングを優先
- TypeScriptの厳密な型チェックを活用
- コンポーネントの再利用性を重視
- エラーハンドリングの統一

### 命名規則
- コンポーネント: PascalCase (例: `ArtistCard`)
- 関数: camelCase (例: `getArtistProfile`)
- 定数: UPPER_SNAKE_CASE (例: `MAX_IMAGE_SIZE`)
- ファイル: kebab-case (例: `artist-profile.tsx`)

### ファイル構造
```
src/
├── components/     # 再利用可能なコンポーネント
├── features/       # 機能別モジュール
├── hooks/          # カスタムフック
├── services/       # API・外部サービス
├── types/          # TypeScript型定義
├── utils/          # ユーティリティ関数
└── styles/         # スタイル関連
```

## 🔧 開発ワークフロー

### コミットメッセージ
- `feat:` 新機能追加
- `fix:` バグ修正
- `refactor:` リファクタリング
- `docs:` ドキュメント更新
- `test:` テスト追加・修正

### ブランチ戦略
- `main`: 本番環境
- `develop`: 開発環境
- `feature/*`: 新機能開発
- `hotfix/*`: 緊急修正

## 🧪 テスト戦略
- ユニットテスト: Jest + React Testing Library
- E2Eテスト: Playwright
- 型チェック: TypeScript strict mode
- コード品質: ESLint + Prettier

## 🚀 パフォーマンス最適化
- 画像最適化: WebP形式、遅延ローディング
- コード分割: 動的インポート
- キャッシュ戦略: React Query
- バンドル最適化: Tree shaking

## 🔒 セキュリティ
- 入力値検証
- XSS対策
- CSRF対策
- 認証・認可の適切な実装

## 📱 モバイル対応
- レスポンシブデザイン
- タッチ操作の最適化
- オフライン対応
- プッシュ通知

## 🌐 国際化
- 多言語対応
- 地域設定
- 通貨・日付フォーマット
- RTL言語対応



